AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda template that exports data from DynamoDB to S3 daily..
Parameters:
  EnvName:
    Type: String
    Description: Name of an environment. 'dev', 'uat', 'prod' and any name.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  LambdaHandlerPath:  
    Type: String
    Default: index.handler
    Description: Path of a Lambda Handler. 
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  BucketName:
    Type: String
    Default: "receevebucket-name"  
    
    
Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaRole
  LambdaFunctionName:
    Value:
      Ref: LambdaFunction
  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaARN-${EnvName}
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      Path: /




  EventRule0:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: eventrule1_EventRule0
      ScheduleExpression: cron(00 2 * * ? *)
      State: ENABLED
      Targets: 
        - Arn: !Sub ${LambdaFunction.Arn}
          Id:  EventRule0     

  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${LambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${EventRule0.Arn}


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: lambda-function-${EnvName}
      Description: LambdaFunctioni of nodejs18.x.
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref BucketName
        S3Key: function.zip
          



      Handler: !Ref  LambdaHandlerPath
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          ENV:
            Fn::Sub: ${EnvName}
          TZ: UTC
          S3BUCKET: 
                Fn::ImportValue: !Sub MainBucketName
          TABLEARN:
                Fn::ImportValue: !Sub dynamoarn
          #TABLENAME:      
          #      Fn::ImportValue: !Sub TableName


Outputs:
 # LAMBDAID:
 #   Value: !GetAtt LambdaFunction
 #   Description: Table name of the newly created DynamoDB table'
 #   Export:
 #     Name: lambdaid

  LAMBDAARN:
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: lambdaarn

         






